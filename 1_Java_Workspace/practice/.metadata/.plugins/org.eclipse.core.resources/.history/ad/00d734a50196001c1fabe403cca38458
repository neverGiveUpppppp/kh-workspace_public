package com.kh.example.chap01_byte.model.dao;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class ByteDAO {

	public void fileOpen() {
		// 기반 & 보조 스트림 클래스 찾는 법
		// 파일로부터 byte단위로 데이터를 읽어오고 싶다
		// 목적 명료하게 확실히 해야함 -> 글로 정리
		// byte 글씨 들어가면 stream // 데이터 읽어오기 = 입력 = input
		// File Stream 입력=Input --> FileInputStream
		
		
//		FileInputStream fis = new FileInputStream(); // error
		// 에러메세지 : The constructor FileInputStream() is undefined
        // 기본생성자가 아닌 매개변수 생성자이므로 어떤 매개변수가 들어가는지 공식API에서 검색
//		FileInputStream fis = new FileInputStream("a_byte.txt"); // error
		// Unhandled exception type FileNotFoundException
		// 어떤 예외가 떴는지 확인
		// 메소드 말고도 throws를 생성자에서도 가능
		
		try {
			FileInputStream fis = new FileInputStream("a_byte.txt");
			
			while(fis.read() != -1) {
				System.out.print(fis.read()+ " "	); // 문자가 나오기 위해 char강제형변환
//				fis.read(); // 이클립스 추천클릭-catch문 추가
			// This method blocks if no input is yet available
			// 파일크기 알 수 있는 방법x. 마지막에 도착했는지 알 수 있는 방법. -1되면 마지막 도착인지 알 수 있음
			}  //결과값 : b d f c e 
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
	}
	public void fileSave() {
		// 기반 & 보조 스트림 클래스 찾는 법
		// 데이터를 파일에 byte 단위로 쓰고 싶다
		// byte사용=stream, 쓰고싶다=출력=output -->FileOutputStream
		
		FileOutputStream fos = null; // catch문 안에 fos.close()때문에 null;로 하나빼둠
		try {
//			FileOutputStream fos = new FileOutputStream("a_byte.txt");
//			fos = new FileOutputStream("a_byte.txt");
			// 파일이 존재하지 않으면 자동으로 파일 생성
			fos = new FileOutputStream("a_byte.txt",true); // true인자 추가하면 이어쓰기 가능
			
			// write(int b):void
			fos.write(97); //error:IOException 예외처리 안했기에 아래catch()에 IOException추가
						   // 97에 맞는 아스키코드인 a를 write함
			
			// write(byte[] b):void
			byte[] bArr = {98, 99, 100, 101, 102, 103};
			// 아스키코드 변환 : b c d e f g
			// 숫자로 저장 되어있는데 보이는 것만 char로 보이는것.
			fos.write(bArr);
			
			// write(byte[] b, int off, int len):void
			fos.write(bArr, 1, 3); // 1부터 3개를 가지고 오는 것
			
			
		} catch (FileNotFoundException e) { //error : | IOException 추가하니 발생ㅇ
			e.printStackTrace();
		} catch (IOException e) { // fos.write(97);의 예외처리
			e.printStackTrace();
		} finally {
			try {
				fos.close(); // 무조건 닫아줘야한다 // .close()도 throws로 위임
			} catch (IOException e) {
				e.printStackTrace();
			} 
			// fos가 try문 안에 있기에 try문 밖에 FileOutputStream fos = null;로 설정해줄 것
		}
		
		
	}
	
}
