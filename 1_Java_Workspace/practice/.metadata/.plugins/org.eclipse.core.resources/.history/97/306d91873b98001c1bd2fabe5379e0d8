package com.kh.example.chap03_assist.part01_buffer.model.dao;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;

public class BufferDAO {
	public void inputByte() {
	// 목적 :파일에 있는 데이터를 바이트 기반으로 빠르게 읽어오고 싶다
	// 파일→File 바이트기반→stream 버퍼의읽기→input 빠르게→Bufferd => FileinputStream
	// 기반스트림이 바이트면 보조스트림도 바이트이여함  					 =>BufferedInputStream
	
		FileInputStream fis = null;
		BufferedInputStream bis = null;
		try {
			fis = new FileInputStream("c_buffer.txt");  // 기반
			bis = new BufferedInputStream(fis); // 보조    // 매개변수에 기반담기 → 다형성
			// BufferedInputStream(InputStream in) 인풋스트림계열의 최상위 클래스 : 모든 기반스트림을 받을 수 있게 최상위클래스를 매개변수에 받는 것(다형성)
			
			// 위와 동일한 한줄 코드
//			BufferedInputStream bis = new BufferedInputStream(new FileInputStream("c_buffer"));
			// "c_buffer" 아직 안만들어서 실행하며 에러날 것
			
			int value;
			while ((value = (bis.read())) != -1) {
				System.out.print(value+" ");
//				System.out.print((char)value+" ");
			}
		}catch(FileNotFoundException e) {
			e.printStackTrace();
		}catch (IOException e) {
			e.printStackTrace();
		}finally {
			try {
				bis.close();
			}catch(IOException e) {
				e.printStackTrace();
			}
		}
	}
		
	public void outputByte() {
		// 목적 : 파일에 바이트기반으로 데이터를 빠르게 쓰고 싶다
		// 파일→File 바이트기반→Stream 빠르게→Buffered 쓰기→output 
		// => 기반 FileOutputStream & 보조 BufferdOutputStream
		
		FileOutputStream fos = null;
		BufferedOutputStream bos = null;
		try {
			fos = new FileOutputStream("c_buffer.txt");
			bos = new BufferedOutputStream(fos); // File이 Buffered안에 있기에 버퍼로 사용
//				BufferdOutputStream bos = new BufferdOutputStream(new FileOutputStream("c_buffer"));
			
			bos.write(65); // 보조(bos)가 기반(fos)을 품기 때문에 bos만 써주면 된다 
			byte[] bArr = {66,67,68,69}; // 아스키코드 : 65 66 67 68 69 => ABCDE
			bos.write(bArr); 			 
			
		}catch (FileNotFoundException e) {
			e.printStackTrace();
		}catch (IOException e) {
			e.printStackTrace();
		}finally {
			try {
				bos.close(); // 보조스트림 BufferedOutputStream의 close()
				fos.close(); // 기반스트림 FileOutputStream의 close() 
				// 보조스트림을 닫아주면 기반도 자동으로 닫힘. 즉, 기반은 안닫아도 알아서 닫히므로 안써도 된다
			}catch(IOException e) {
				e.printStackTrace();
			}
		} // 결과값 : ABCDE
	}
	
////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////	
	
	// try with resoure문
	public void outputByte2() {
		try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("c2_buffer.txt"));){
			bos.write(65); // 보조(bos)가 기반(fos)을 품기 때문에 bos만 써주면 된다 
			byte[] bArr = {66,67,68,69}; // 아스키코드 : 65 66 67 68 69 => ABCDE
			bos.write(bArr); 	
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// try with resoure문
	public void intputByte2() {
		try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(("c2_buffer.txt")))) {

			int value;
			while((value=bis.read()) != -1) {
				System.out.print(value+" ");
//				System.out.print((char)value+" ");
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void outputChar() {
		// 목적 : 파일에 문자 기반으로 데이터를 빠르게 쓰고 싶다
		// 파일→File 문자→Writer 빠르게→Buffered 
		// => 기반 FileWriter & 보조 BufferedWriter
		
		BufferedWriter bw =null;
		try {
			FileWriter fw = new FileWriter("d_char.txt");
			bw = new BufferedWriter(fw);
			
			bw.write("안녕하세요\n");
			bw.write("반갑습니다\n");
			bw.write("건강하세요\n");
			
			
		}catch(IOException e) {
			e.printStackTrace();
		}
		
		
	}
	
}
