/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-14 08:13:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"js/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>.test{width:300px; min-height:50px; border:1px solid red;}</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	\r\n");
      out.write("	<h1>jQuery-Ajax구현</h1>\r\n");
      out.write("	\r\n");
      out.write("	<h3>1.client가 server에 requset</h3>\r\n");
      out.write("	이름 : <input type=\"text\" id=\"myName\">\r\n");
      out.write("	<button id=\"nameBtn\">전송</button>\r\n");
      out.write("	<script>\r\n");
      out.write("		$('#nameBtn').on('click',function(){\r\n");
      out.write("			var userName = $('#myName').val();\r\n");
      out.write("	        \r\n");
      out.write("			$.ajax({\r\n");
      out.write("	        	url: 'jQueryAjaxServlet1',\r\n");
      out.write("	        	type: 'get',\r\n");
      out.write("	            data: {userName:userName},\r\n");
      out.write("	            success: function(){\r\n");
      out.write("	            	alert('전송 성공');\r\n");
      out.write("	            },\r\n");
      out.write("	            error: function(){\r\n");
      out.write("	            	alert('전송 실패');\r\n");
      out.write("	            },\r\n");
      out.write("	            complete: function(){\r\n");
      out.write("	            	alert('성공실패 상관없이 무조건 실행되는 complete');\r\n");
      out.write("	            }\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	<h3>2.버튼 선택 시, 서버에서 보낸 값 사용자가 수신</h3>		<!-- 서버가 클라이언트에 response -->\r\n");
      out.write("	<button id=\"getServerTextBtn\">서버에서 보낸 값 확인</button>\r\n");
      out.write("	<p class=\"test\" id=\"p1\"></p>\r\n");
      out.write("	<script>\r\n");
      out.write("		$('#getServerTextBtn').click(function(){\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url:'jQueryAjax2',\r\n");
      out.write("				// data : 서버에서 사용자에게 보낼 데이터가 없으므로 기술x\r\n");
      out.write("				type : 'get',\r\n");
      out.write("				success: function(data){\r\n");
      out.write("					alert('성공');\r\n");
      out.write("					console.log(typeof data);\r\n");
      out.write("					$('#p1').text(data);\r\n");
      out.write("				},\r\n");
      out.write("				error: function(){\r\n");
      out.write("					alert(\"에러 발생\");	\r\n");
      out.write("				},\r\n");
      out.write("				complete: function(){\r\n");
      out.write("					alert('comeplete work');\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("	<h3>3. 서버로 기본형 전송 값이 있고, 결과로 문자열을 받아 처리</h3>\r\n");
      out.write("	<h4>두 개의 값을 더한 결과를 받아옴</h4>\r\n");
      out.write("	첫번째 숫자 : <input type=\"text\" id=\"firstNum\"><br>\r\n");
      out.write("	두번째 숫자 : <input type=\"text\" id=\"secondNum\"><br>\r\n");
      out.write("	<button id=\"plusBtn\">더하기</button>\r\n");
      out.write("	<p class=\"test\" id=\"p2\"></p>\r\n");
      out.write("	<script>\r\n");
      out.write("		// 더하기 버튼을 누르면 첫번째 숫자의 값과 두번째 숫자의 값을 ajax를 통해 jQuery3.do쪽으로 전송하는 코드 작성\r\n");
      out.write("		$('#plusBtn').click(function(){\r\n");
      out.write("			var n1 = $('#firstNum').val();\r\n");
      out.write("			var n2 = $('#secondNum').val();\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: 'jQueryAjax3',\r\n");
      out.write("				data: {n1:n1, n2:n2},\r\n");
      out.write("				type: 'post',\r\n");
      out.write("				datatype: 'text',\r\n");
      out.write("				success: function(data){\r\n");
      out.write("					console.log('전송 성공');\r\n");
      out.write("					console.log(\"받아온 data값 = \" +data);\r\n");
      out.write("				},\r\n");
      out.write("				error: function(data){\r\n");
      out.write("					console.log('전송 실패');\r\n");
      out.write("				},\r\n");
      out.write("				async: true\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<h3>4. Object형태의 데이터를 서버에 전송, 서버에서 데이터 처리 후 서버 console로 출력</h3>\r\n");
      out.write("	<!-- 여기서 말하는 콘솔은 이클립스 콘솔을 의미함 -->\r\n");
      out.write("	학생1 : <input type=\"text\" id=\"student1\"><br>\r\n");
      out.write("	학생2 : <input type=\"text\" id=\"student2\"><br>\r\n");
      out.write("	학생3 : <input type=\"text\" id=\"student3\"><br>\r\n");
      out.write("	<button id=\"studentTest\">결과확인</button>\r\n");
      out.write("	<script>\r\n");
      out.write("		// 결과확인 버든을 누르면 학생1, 학생2, 학생3의 이름이 jQuery4.do 쪽으로 전송\r\n");
      out.write("		// 전송된 학생들의 이름은 서버의 console창에 아래 예시와 같이 출력되고\r\n");
      out.write("		// 화면에서는 \"전송 성공\"이라는 알람창이 뜸\r\n");
      out.write("		// console 출력 예시 : 수업을 들을 하생은 ooo,xxx,ㅁㅁㅁ입니다\r\n");
      out.write("		$('#studentTest').on('click',function(){\r\n");
      out.write("			var student1 = $('#student1').val();\r\n");
      out.write("			var student2 = $('#student2').val();\r\n");
      out.write("			var student3 = $('#student3').val();\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url:'jQueryAjax4',\r\n");
      out.write("				data: {student1:student1, student2:student2, student3:student3},\r\n");
      out.write("				type: 'post',\r\n");
      out.write("				/* datatype: 'text', */\r\n");
      out.write("				success:function(data){\r\n");
      out.write("					alert('전송 성공');	\r\n");
      out.write("				},\r\n");
      out.write("				error: function(data){\r\n");
      out.write("					alert('fail');\r\n");
      out.write("				},\r\n");
      out.write("				complete: function(){\r\n");
      out.write("					alert('another func');\r\n");
      out.write("				},\r\n");
      out.write("			});\r\n");
      out.write("		\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("	<h3>5. 서버로 기본형 데이터 전송, 서버에서 객체반환</h3>\r\n");
      out.write("	<!-- 객체반환은 복수 데이터를 보낼 수 있으므로 복수데이터 의미 -->\r\n");
      out.write("	<h4>유저 번호 보내서 해당 유저 정보 가져오기</h4>\r\n");
      out.write("	유저 번호 : <input type=\"text\" id=\"userNo\"><br>\r\n");
      out.write("	<button id=\"getUserInfoBtn\">정보 가져오기</button>\r\n");
      out.write("	<p class=\"test\" id=\"p3\"></p>\r\n");
      out.write("	<textarea class=\"test\" id=\"textarea3\" cols=\"40\" rows=\"5\"></textarea>\r\n");
      out.write("	<script>\r\n");
      out.write("			// 유저 번호에 따라서 사람 검색하는게 목표\r\n");
      out.write("		$('#getUserInfoBtn').on('click',function(){\r\n");
      out.write("			var userNo = $('#userNo').val();\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				// url:'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/jQueryAjax5', // \r\n");
      out.write("			    url:'00_practice_now/jQueryAjax5',\r\n");
      out.write("				data: {userNo:userNo},\r\n");
      out.write("				datype:'json',\r\n");
      out.write("				success: function(data){\r\n");
      out.write("					console.log(data);\r\n");
      out.write("					console.log(typeof data);\r\n");
      out.write("					var result = \"\";\r\n");
      out.write("					if(data != null){\r\n");
      out.write("						// var result = data.userNo+\" \"+data.userName + \", \" + data.userNation;\r\n");
      out.write("						var result = data[\"userNo\"]+\" \"+data[\"userName\"] + \", \" + data['userNation'];\r\n");
      out.write("					}\r\n");
      out.write("				},\r\n");
      out.write("				error: function(xhr){ // xhr // XMLHttpRequest (XHR)\r\n");
      out.write("					console.log(xhr.status); // 무슨 에러인지 나오는 코드\r\n");
      out.write("				// arc postman api 사용해볼 것\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
