<?xml version="1.0" encoding="UTF-8"?>
<!-- 아래는 configuration 파일이라는걸 알려주는 것 -->
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">


<!-- http://mybatis.org/dtd/mybatis-3-config.dtd 이 사이트를 주소창에 넣어보면 파일이 하나 다운되는데 컨피겨 파일을 어떻게 쓸건지 설정파일이 다운받아짐
안에 구조가 어떻고 뭘하고 등 컨피겨를 어떻게 사용할지 불러오는 역할을 하는 링크. 이 파일을 받아와서 사용할 수 있게 되므로써 자동완성에서도 컨피겨가 뜰 수 있게되는 것
-->

<configuration>
<!--  
The content of element type "configuration" must match 
태그를 아래 순서대로 맞추라는 에러메세지
 "(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,
 reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)".
 
 
 <MyBatis Configuration파일의 태그 순서>
 (properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,
 reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)
 
 
-->

	<properties resource="/driver.properties"></properties>


	
	<settings>
		<!-- null값을 제대로돈 널값으로 인지시킬 수 있게 하는 코드
		이 코드 세팅안하면 db에서 null가능해도 마이바티스에서 인지가 안되기에 에러발생함 -->
		<setting name="jdbcTypeForNull" value="NULL"/>  
	</settings>


	<!-- 클래스 별칭 등록  -->
	<typeAliases >
		<typeAlias type="member.model.vo.Member" alias="Member"></typeAlias>
		<typeAlias type="board.model.vo.Board" alias="Board"></typeAlias>
		<typeAlias type="board.model.vo.Reply" alias="Reply"></typeAlias>
		<!-- alias="" 안에 대소문자 다 가능 -->
	</typeAliases>


<!-- DB에 연결할 설정에 대한 정보 선언-->
	<environments default="development"> <!-- default 속성값 : environments 아래 하위 태그인 연결할 환경(environment)이 많은데 어떤 녀석을 기본값으로 부를지 지정 -->
		
		<!-- Database 연결 설정 정보 -->
		<!-- 실질적인 데이터는 여기  environments태그 안에 많이 담김-->
		<environment id="development"> <!-- id속성 : environment 구분 -->  
		<!-- environment태그에 들어가는 id속성값의 역할 : id는 pk역할. 즉, environments 중에 여러  environment 중에 어떤 놈을 부를지 알 수 있게 하는 pk역할-->
		<!-- db를 여러개 연결할 수 있음. 특히 RDMS 같은 경우 다수 연결하는 경우가 많음 -->
			<transactionManager type="JDBC"/>  <!-- 트랜잭션(커밋,롤백)을 누가 관리할 것인지 설정 -->
					<!-- 
					transactionManager type 속성에 들어가는 두가지 속성값
						1)JDBC : 커밋/롤백 직접 처리(수동으로 트랜젝션 처리)
						2)MANAGED : 컨테이너가 트랜젝션의 모든 생명주기 관리(자동 트랜잭션 처리)
							컨테이너 : 시스템 같은 것. 서블릿을 관리하는 시스템, JDBC를 관리하는 시스템
					 -->
			<dataSource type="POOLED"> <!-- ConnectionPool 사용 여부 -->
			<!-- 
			 ConnectionPool 사용 여부
	 			dataSource type에 들어가는 속성값 3가지
			 		UNPOOLED : db에 대한 요청이 올 때마다 실시간으로 커넥션을 만드는 것. // 미리 커넥션 객체를 만들어 놓는 것이 아니기 때문에 좀 느릴 수 있음
			 		POOLED : 미리 커넥션 객체를 만들어 놓고 가져다 쓰는 것. 커넥션 객체를 미리 만들어 놓고 관리하여 요청이 올 때마다 pool에서 꺼내서 재사용
			 					Web applicaion에서 많이 쓰는 방식 // static이랑 상관없이 jdbc 자체가 pooled방식임.  
			 		JNDI :  jndi는 외부에서 관리하는 방식. 복잡해지니 수업에서는 스킵
			
							*type="" 안에 대소문자 구분?
			 -->
			 	<!-- 1) 내부파일 지정 방식  -->
<!-- 			<property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
			 	<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
			 	<property name="username" value="MyBatis"/>
			 	<property name="password" value="MyBatis"/> 							-->
			 	
			 	<!-- 2)외부파일 로드 방식 -->
			 	<property name="driver" value="${driver}"/> <!-- el형식. jsp에서 쓴 el이랑 똑같은 el은 아닌 걸 주의. 단순 expression language일 뿐 함수 사용이나 그런게 안된다는 의미 -->
			 	<property name="url" value="${url}"/>
			 	<property name="username" value="${username}"/>
			 	<property name="password" value="${password}"/> 
			 	<!-- 파일들을 읽어올 수 있게 properties태그 설정을 밖에 해야함 -->
			</dataSource>
		</environment>
	</environments>




	<!-- mappers등록 -->
	<mappers>
		<mapper resource="mappers/member-mapper.xml"></mapper>
		<mapper resource="/mappers/board-mapper.xml"/> <!-- "mappers..." 앞에 / 있어도 없어도 됨 -->
	</mappers>


</configuration> <!-- 다큐먼트 타입을 안쓰면 자동완성에 컨피겨 안뜨고 독타입부터 쓰라고 추천뜸  -->






