<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

<!-- 1.Appenders -->
<!-- 


appender  : 전달 받은 로그를 어디에 출력할지 결정
(appender 종류 지정해야함)
	ConsoleAppender : 로그를 콘솔에 출력하기 위한 어펜더
	JDBCAppender : 로그를 db에 출력하기 위한 어펜더
	FileAppender : 로그를 파일에 출력하기 위한 어펜더
				단점 : 지정 파일에 로그가 계속 남아 크기가 지나치게 커지고 지속적인 로그 관리가 불가능하다는 단점
	RollingFileAppender : 파일어펜더를 보완하는 어펜더

	%p : debug, info, warn, error, fatal 등의 priority

	layout : 로그를 어떤 형식으로 출력할 것인지 결정
		종류 : DateLayout, HTMLLayout, PatternLayout(디버깅에 가장 적합), SimpleLayout XMLLayout
	
		%m :  로그 내용 출력
		%d : 로깅 이벤트가 발생한 시간 출력(프로그램 속도를 느리게 할 수 있음)
				포맷을 %d{HH:mm:ss, SSS}와 같은 형태로 사용하며 SimpleDateFormat에 따른 포매팅을 하면 됨
		%t : 로깅 이벤트가 발생된 스레드 이름 출력
		%% : % 출력
		%n : 개행문자 출력
		%c : package(카테고리) 출력
		%c{n} : n(숫자)만큼의 package 를 하단부터 역으로 출력
		%C : 호출자의 클래스명 출력
		%f : 로깅이 발생한 프로그램 파일명 출력
		%l : 로깅이 발생한 caller의 정보 출력
		%L : 로깅이 발생한 caller의 라인수 출력
		%M : 로깅이 발생한 method이름 출력
		%r : 애플리케이션 시작 이후부터 로깅이 발생한 시점의 시간(밀리세컨) 출력


 -->	
 
 
 
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<appender name="myConsole" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" /> <!-- 콘솔 출력이라 타겟 & sysout -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c{1}.%M{%L} - %m%n" /> <!-- %c라고하면 다 나오니 끝에 하나만 나오게 %c{1} -->
		</layout>
	</appender>
	
<!-- 파일변환 연습 -->	
<!-- 목표 : 로그인 이력을 로그파일로 만들려고 함 -->
	<appender name="myDailyFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="/logs/member/login.log" /> <!-- 파일위치 & 파일명 지정 // 현재 위치는 D드라이브 logs폴더 -->
		<param name="Append" value="true" /> 				 <!-- Append(이어쓰기) true(가능)하게 하겠다는 의미-->
		<param name="encoding" value="UTF-8" />  			 <!-- 인코딩 -->
		<param name="DatePattern" value="'.'yyyyMMdd" /> 	 <!-- 백업하는 파일명 형식지정 --> 
		
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{yy-MM-dd HH:mm:ss} [%p] %c{1}.%M{%L} - %m%n"/> <!-- value해석 : 연도 월 일 시간 프리월리티(?) 어떤 클래스의 어떤 메소드에서 진행했는지 그리고 라인수 그리고 메세지까지 --> 
		</layout>
	</appender>
	
	<appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %m%n"/>
		</layout>
	</appender>
	
	
	
	
	
	
	
<!-- 2.Application Loggers -->
	<!-- 
		등록된 로그들을 받아주는 역할
			DEBUG < INFO < WARN < ERROR < FATAL  (오른쪽으로 갈 수록 심각한 에러)  
			설정한 level 이상만 출력
				ex. level info라고 지정하면 debug는 안보임	
			
				fatal : 아주 심각한 에러발생
				error : 어떤 요청 처리 중 문제 발생
				warn : 프로그램 실행에는 문제 없지만 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지
				info : 상태 변경과 같은 정보성 메세지
				debug : 개발 시 디버그 용도로 사용하는 메세지
				trace : debug가 너무 광범위한 것들 해결하기 위해 디버그보다 좀 더 상세한 이벤트를 나타냄. 경로추적에서 많이씀
	 -->
	<logger name="com.kh.Spring">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	
	<logger name="com.kh.Spring.log.Log4jTest" additivity="false">
		<level value="debug"></level>
		<appender-ref ref="console" /> <!-- Root Logger의 root태그의 태그를 가져와봄. 결과가 두번씩 나오게됨 -->
		<!--
			 <콘솔에 메세지가 두번 찍히는 이유>
			참조해서 한번 더 나오는 것 
			콘솔을 참조해서 위에있는 콘솔어펜더에 가서 콘솔에 한번 찍히고, 모든 로거는 루트로거로 내려가기 때문에 
			또 어펜더-ref가 있기 때문에 또 한번 참조해서 그래서 두번 나오는 것
			
			메세지 중복 해결방법
			additivity="false" 속성 추가 
				의미 : root로 내려가지 않게 하겠다
			
		-->
	</logger>
<!-- 회원등록에 로거 추가  -->
	<logger name="com.kh.Spring.member.controller.MemberController" additivity="false">
		<level value="debug" />
		<appender-ref ref="myConsole" />
		<!-- <appender-ref ref="myDailyFile" /> --> <!-- 이미 멤버컨트롤러 등록한게 있기에 이 한줄만 등록하면 됨  -->
	</logger> <!-- 어펜더가 콘솔쪽으로 넘어갈 것임. 원하는 형식이 아니라 새어펜더 추가해야힘. 강의2:37  -->
	 
	
<!-- 인터셉터  -->	
	<logger name="com.kh.Spring.common.interceptor.TestInterceptor" additivity="false">
		<level value="debug" />
		<appender-ref ref="myConsole" />
	</logger> 
	
<!-- LoginInterceptor.java -->	
	<logger name="com.kh.Spring.common.interceptor.LoginInterceptor" additivity="false">
		<level value="info" />
		<appender-ref ref="myDailyFile" />
	</logger> 
	
<!-- SQL 로그기록 -->	
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="info" />
		<appender-ref ref="sqlLogger" />
	</logger> 
<!-- ResultSet 보여주는 거 -->	
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info" />
		<appender-ref ref="sqlLogger" />
	</logger> 
	
<!-- AOP : LoggerAspect1.java -->	
	<logger name="com.kh.Spring.common.aop">
		<level value="debug"/>
	</logger>
	
	
	
	

<!-- 3.Root Logger -->
	<!-- 
		모든 자식 logger들의 로깅 출력이 root logger를 통해 일어남
		두번째의 모든 로거들은 실행이 되면 Root Logger로 찾아옴
	
		appender-ref ref="console"
			appender-ref : 어펜더를 참조한다
			ref="console" : name속성이 console인거를 참조한다

	 -->	
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	
	
	
	
</log4j:configuration>




